/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Board } from "./Board";
import { BoardCountArgs } from "./BoardCountArgs";
import { BoardFindManyArgs } from "./BoardFindManyArgs";
import { BoardFindUniqueArgs } from "./BoardFindUniqueArgs";
import { CreateBoardArgs } from "./CreateBoardArgs";
import { UpdateBoardArgs } from "./UpdateBoardArgs";
import { DeleteBoardArgs } from "./DeleteBoardArgs";
import { ColumnFindManyArgs } from "../../column/base/ColumnFindManyArgs";
import { Column } from "../../column/base/Column";
import { BoardService } from "../board.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Board)
export class BoardResolverBase {
  constructor(
    protected readonly service: BoardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "read",
    possession: "any",
  })
  async _boardsMeta(
    @graphql.Args() args: BoardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Board])
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "read",
    possession: "any",
  })
  async boards(@graphql.Args() args: BoardFindManyArgs): Promise<Board[]> {
    return this.service.boards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Board, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "read",
    possession: "own",
  })
  async board(
    @graphql.Args() args: BoardFindUniqueArgs
  ): Promise<Board | null> {
    const result = await this.service.board(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Board)
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "create",
    possession: "any",
  })
  async createBoard(@graphql.Args() args: CreateBoardArgs): Promise<Board> {
    return await this.service.createBoard({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Board)
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "update",
    possession: "any",
  })
  async updateBoard(
    @graphql.Args() args: UpdateBoardArgs
  ): Promise<Board | null> {
    try {
      return await this.service.updateBoard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Board)
  @nestAccessControl.UseRoles({
    resource: "Board",
    action: "delete",
    possession: "any",
  })
  async deleteBoard(
    @graphql.Args() args: DeleteBoardArgs
  ): Promise<Board | null> {
    try {
      return await this.service.deleteBoard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Column], { name: "columns" })
  @nestAccessControl.UseRoles({
    resource: "Column",
    action: "read",
    possession: "any",
  })
  async findColumns(
    @graphql.Parent() parent: Board,
    @graphql.Args() args: ColumnFindManyArgs
  ): Promise<Column[]> {
    const results = await this.service.findColumns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
