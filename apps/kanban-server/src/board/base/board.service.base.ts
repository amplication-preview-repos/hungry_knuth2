/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Board as PrismaBoard,
  Column as PrismaColumn,
} from "@prisma/client";

export class BoardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BoardCountArgs, "select">): Promise<number> {
    return this.prisma.board.count(args);
  }

  async boards<T extends Prisma.BoardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardFindManyArgs>
  ): Promise<PrismaBoard[]> {
    return this.prisma.board.findMany<Prisma.BoardFindManyArgs>(args);
  }
  async board<T extends Prisma.BoardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardFindUniqueArgs>
  ): Promise<PrismaBoard | null> {
    return this.prisma.board.findUnique(args);
  }
  async createBoard<T extends Prisma.BoardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardCreateArgs>
  ): Promise<PrismaBoard> {
    return this.prisma.board.create<T>(args);
  }
  async updateBoard<T extends Prisma.BoardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardUpdateArgs>
  ): Promise<PrismaBoard> {
    return this.prisma.board.update<T>(args);
  }
  async deleteBoard<T extends Prisma.BoardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BoardDeleteArgs>
  ): Promise<PrismaBoard> {
    return this.prisma.board.delete(args);
  }

  async findColumns(
    parentId: string,
    args: Prisma.ColumnFindManyArgs
  ): Promise<PrismaColumn[]> {
    return this.prisma.board
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .columns(args);
  }
}
